{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n  defineDocumentType,\r\n  defineNestedType,\r\n  makeSource,\r\n} from \"contentlayer2/source-files\";\r\n\r\n\r\n\r\n// Define nested type for `links`\r\nconst LinksProperties = defineNestedType(() => ({\r\n  name: \"LinksProperties\",\r\n  fields: {\r\n    doc: { type: \"string\" },\r\n    api: { type: \"string\" },\r\n  },\r\n}));\r\n\r\n// Main document type definition\r\nexport const Doc = defineDocumentType(() => ({\r\n  name: \"Doc\",\r\n  filePathPattern: `docs/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    description: { type: \"string\", required: true },\r\n    links: { type: \"nested\", of: LinksProperties },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: \"string\",\r\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n    },\r\n    slugAsParams: {\r\n      type: \"string\",\r\n      resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n    },\r\n  },\r\n}));\r\n\r\n// // Custom rehype plugin to process code blocks\r\n// const customCodeBlockProcessor: Plugin = () => (tree) => {\r\n//   visit(tree, (node: any) => {\r\n//     if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n//       const codeElement = node.children?.[0];\r\n//       if (codeElement?.tagName !== \"code\") return;\r\n\r\n//       // Extract metadata\r\n//       if (codeElement.data?.meta) {\r\n//         const eventMatch = codeElement.data.meta.match(/event=\"([^\"]*)\"/);\r\n//         if (eventMatch) {\r\n//           node.__event__ = eventMatch[1];\r\n//           codeElement.data.meta = codeElement.data.meta.replace(/event=\"[^\"]*\"/, \"\");\r\n//         }\r\n//       }\r\n//       console.log(codeElement)\r\n//       node.__rawString__ = codeElement.children?.[0]?.value;\r\n//     }\r\n//   });\r\n// };\r\n\r\n// Contentlayer source configuration\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Doc],\r\n  // mdx: {\r\n  //   remarkPlugins: [remarkGfm, codeImport],\r\n  //   rehypePlugins: [\r\n  //     rehypeSlug,\r\n  //     [\r\n  //       rehypePrettyCode,\r\n  //       {\r\n  //         theme: \"kanagawa-dragon\",\r\n  //         getHighlighter,\r\n  //         onVisitLine(node: any) {\r\n  //           if (!node.children.length) {\r\n  //             node.children = [{ type: \"text\", value: \" \" }];\r\n  //           }\r\n  //         },\r\n  //         onVisitHighlightedLine(node: any) {\r\n  //           node.properties.className.push(\"line--highlighted\");\r\n  //         },\r\n  //         onVisitHighlightedWord(node: any) {\r\n  //           node.properties.className = [\"word--highlighted\"];\r\n  //         },\r\n  //       },\r\n\r\n  //     ],\r\n  //     customCodeBlockProcessor,\r\n  //     [\r\n  //       rehypeAutolinkHeadings,\r\n  //       {\r\n  //         properties: {\r\n  //           className: [\"subheading-anchor\"],\r\n  //           ariaLabel: \"Link to section\",\r\n  //         },\r\n  //       },\r\n  //     ],\r\n  //   ],\r\n  // },\r\n});\r\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAKP,IAAM,kBAAkB,iBAAiB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,KAAK,EAAE,MAAM,SAAS;AAAA,IACtB,KAAK,EAAE,MAAM,SAAS;AAAA,EACxB;AACF,EAAE;AAGK,IAAM,MAAM,mBAAmB,OAAO;AAAA,EAC3C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,OAAO,EAAE,MAAM,UAAU,IAAI,gBAAgB;AAAA,EAC/C;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,IAC9C;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,IACvE;AAAA,EACF;AACF,EAAE;AAwBF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCrB,CAAC;",
  "names": []
}
