{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// import { defineDocumentType, makeSource } from 'contentlayer2/source-files'\r\n\r\n// const Docs = defineDocumentType(() => ({\r\n//   name: 'Docs',\r\n//   filePathPattern: `docs/**/*.mdx`,  // Make sure this pattern matches the actual file path\r\n//   contentType: 'mdx',\r\n//   fields: {\r\n//     title: { type: 'string' },\r\n//     description: { type: 'string' },\r\n//   },\r\n//   computedFields: {\r\n//     slug: { type: 'string', resolve: (doc) => doc?.title?.toLowerCase().replace(/\\s+/g, '-') },\r\n//   },\r\n// }));\r\n\r\n// export default makeSource({\r\n//   contentDirPath: './content',  // This folder should contain your MDX files\r\n//   documentTypes: [Docs],      // Register Docs document type here\r\n//   disableImportAliasWarning: true,\r\n// });\r\n\r\n// import { getHighlighter } from \"@shikijs/compat\"\r\nimport {\r\n  defineDocumentType,\r\n  defineNestedType,\r\n  makeSource,\r\n} from \"contentlayer2/source-files\"\r\n// import rehypeAutolinkHeadings from \"rehype-autolink-headings\"\r\n// import rehypePrettyCode from \"rehype-pretty-code\"\r\n// import rehypeSlug from \"rehype-slug\"\r\n// import { codeImport } from \"remark-code-import\"\r\n// import remarkGfm from \"remark-gfm\"\r\n// import { visit } from \"unist-util-visit\"\r\n\r\n// import { rehypeComponent } from \"./lib/rehype-component\"\r\n// import { rehypeNpmCommand } from \"./lib/rehype-npm-command\"\r\n\r\n/** @type {import('contentlayer/source-files').ComputedFields} */\r\nconst computedFields = {\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: \"string\",\r\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n  },\r\n}\r\n\r\nconst LinksProperties = defineNestedType(() => ({\r\n  name: \"LinksProperties\",\r\n  fields: {\r\n    doc: {\r\n      type: \"string\",\r\n    },\r\n    api: {\r\n      type: \"string\",\r\n    },\r\n  },\r\n}))\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n  name: \"Doc\",\r\n  filePathPattern: `docs/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    published: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n    links: {\r\n      type: \"nested\",\r\n      of: LinksProperties,\r\n    },\r\n    featured: {\r\n      type: \"boolean\",\r\n      default: false,\r\n      required: false,\r\n    },\r\n    component: {\r\n      type: \"boolean\",\r\n      default: false,\r\n      required: false,\r\n    },\r\n    toc: {\r\n      type: \"boolean\",\r\n      default: true,\r\n      required: false,\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Doc],\r\n  // mdx: {\r\n  //   remarkPlugins: [remarkGfm, codeImport],\r\n  //   rehypePlugins: [\r\n  //     rehypeSlug,\r\n  //     // rehypeComponent,\r\n  //     () => (tree) => {\r\n  //       visit(tree, (node) => {\r\n  //         if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n  //           const [codeEl] = node.children\r\n  //           if (codeEl.tagName !== \"code\") {\r\n  //             return\r\n  //           }\r\n\r\n  //           if (codeEl.data?.meta) {\r\n  //             // Extract event from meta and pass it down the tree.\r\n  //             const regex = /event=\"([^\"]*)\"/\r\n  //             const match = codeEl.data?.meta.match(regex)\r\n  //             if (match) {\r\n  //               node.__event__ = match ? match[1] : null\r\n  //               codeEl.data.meta = codeEl.data.meta.replace(regex, \"\")\r\n  //             }\r\n  //           }\r\n\r\n  //           node.__rawString__ = codeEl.children?.[0].value\r\n  //           node.__src__ = node.properties?.__src__\r\n  //           node.__style__ = node.properties?.__style__\r\n  //         }\r\n  //       })\r\n  //     },\r\n  //     [\r\n  //       rehypePrettyCode,\r\n  //       {\r\n  //         theme: \"github-dark\",\r\n  //         getHighlighter,\r\n  //         onVisitLine(node) {\r\n  //           // Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n  //           // lines to be copy/pasted\r\n  //           if (node.children.length === 0) {\r\n  //             node.children = [{ type: \"text\", value: \" \" }]\r\n  //           }\r\n  //         },\r\n  //         onVisitHighlightedLine(node) {\r\n  //           node.properties.className.push(\"line--highlighted\")\r\n  //         },\r\n  //         onVisitHighlightedWord(node) {\r\n  //           node.properties.className = [\"word--highlighted\"]\r\n  //         },\r\n  //       },\r\n  //     ],\r\n  //     () => (tree) => {\r\n  //       visit(tree, (node) => {\r\n  //         if (node?.type === \"element\" && node?.tagName === \"div\") {\r\n  //           if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\r\n  //             return\r\n  //           }\r\n\r\n  //           const preElement = node.children.at(-1)\r\n  //           if (preElement.tagName !== \"pre\") {\r\n  //             return\r\n  //           }\r\n\r\n  //           preElement.properties[\"__withMeta__\"] =\r\n  //             node.children.at(0).tagName === \"div\"\r\n  //           preElement.properties[\"__rawString__\"] = node.__rawString__\r\n\r\n  //           if (node.__src__) {\r\n  //             preElement.properties[\"__src__\"] = node.__src__\r\n  //           }\r\n\r\n  //           if (node.__event__) {\r\n  //             preElement.properties[\"__event__\"] = node.__event__\r\n  //           }\r\n\r\n  //           if (node.__style__) {\r\n  //             preElement.properties[\"__style__\"] = node.__style__\r\n  //           }\r\n  //         }\r\n  //       })\r\n  //     },\r\n  //     // rehypeNpmCommand,\r\n  //     [\r\n  //       rehypeAutolinkHeadings,\r\n  //       {\r\n  //         properties: {\r\n  //           className: [\"subheading-anchor\"],\r\n  //           ariaLabel: \"Link to section\",\r\n  //         },\r\n  //       },\r\n  //     ],\r\n  //   ],\r\n  // },\r\n})\r\n"],
  "mappings": ";AAsBA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAYP,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AACF;AAEA,IAAM,kBAAkB,iBAAiB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,KAAK;AAAA,MACH,MAAM;AAAA,IACR;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,IACR;AAAA,EACF;AACF,EAAE;AAEK,IAAM,MAAM,mBAAmB,OAAO;AAAA,EAC3C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,IAAI;AAAA,IACN;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4FrB,CAAC;",
  "names": []
}
